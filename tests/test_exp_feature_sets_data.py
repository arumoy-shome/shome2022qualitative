"""Test the data generated by bin/exp-feature-sets.py."""

import pandas as pd
import unittest
import os

ROOTDIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
DATADIR = os.path.join(ROOTDIR, "data")


class TestAdultSexData(unittest.TestCase):
    """Tests results for the adult-sex dataset."""

    def setUp(self):
        self.adult = pd.read_csv(
            os.path.join(DATADIR, "exp-feature-sets-adult-sex.csv")
        )

    def test_feature_sets(self):
        """Test feature sets.

        Test:
            The adult dataset must contains 9 feature sets.

        Test:
            Each feature set must contain metrics for 5 model variants
            (4 models plus the data).

        """
        num_features = self.adult["num_features"].unique().tolist()

        # Test:
        self.assertEqual(len(num_features), 9)

        # Test:
        for n in num_features:
            self.assertEqual(
                self.adult[self.adult["num_features"] == n]["model"].unique().shape[0],
                5,
            )

    def test_model_data(self):
        """Test model data.

        Test:
            The values in the model column must belong to one of
            ['None', 'adaboostclassifier', 'decisiontreeclassifier',
            'logisticregression', 'randomforestclassifier']

        Test:
            Each model variant must contain metrics for 3 privileged
            group variants (privileged group, unprivileged group
            & unconditioned).

        """
        models = self.adult["model"].unique().tolist()

        # Test:
        expected_models = [
            "None",
            "adaboostclassifier",
            "decisiontreeclassifier",
            "logisticregression",
            "randomforestclassifier",
        ]
        self.assertCountEqual(expected_models, models)

        # Test:
        for model in models:
            self.assertEqual(
                self.adult[self.adult["model"] == model]["privileged"]
                .unique()
                .shape[0],
                3,
            )

    @unittest.skip("skip until we have data for 50 iterations.")
    def test_example_count(self):
        """Test total count of examples.

        Test:
            The adult dataset must contain a total of 50*9*5*3 = 4050
            examples.

        """

        self.assertEqual(self.adult.shape[0], 4050)


class TestAdultRaceData(unittest.TestCase):
    """Tests results for the adult-race dataset."""

    def setUp(self):
        self.adult = pd.read_csv(
            os.path.join(DATADIR, "exp-feature-sets-adult-race.csv")
        )

    def test_feature_sets(self):
        """Test feature sets.

        Test:
            The adult dataset must contain 9 feature sets.

        Test:
            Each feature set must contain metrics for 5 model
            variants (4 models plus the data).

        """
        num_features = self.adult["num_features"].unique().tolist()

        # Test:
        self.assertEqual(len(num_features), 9)

        # Test:
        for n in num_features:
            self.assertEqual(
                self.adult[self.adult["num_features"] == n]["model"].unique().shape[0],
                5,
            )

    def test_model_data(self):
        """Test model data.

        Test:
            The values in the model column must belong to one of
            ['None', 'adaboostclassifier', 'decisiontreeclassifier',
            'logisticregression', 'randomforestclassifier']

        Test:
            Each model variant must contain metrics for 3 privileged
            group variants (privileged group, unprivileged group
            & unconditioned).

        """
        models = self.adult["model"].unique().tolist()

        # Test:
        expected_models = [
            "None",
            "adaboostclassifier",
            "decisiontreeclassifier",
            "logisticregression",
            "randomforestclassifier",
        ]
        self.assertCountEqual(expected_models, models)

        # Test:
        for model in models:
            self.assertEqual(
                self.adult[self.adult["model"] == model]["privileged"]
                .unique()
                .shape[0],
                3,
            )

    @unittest.skip("skip until we have data for 50 iterations.")
    def test_example_count(self):
        """Test total count of examples.

        Test:
            The adult dataset must contain a total of 50*9*5*3 = 4050
            examples.

        """

        self.assertEqual(self.adult.shape[0], 4050)


class TestCompasSexData(unittest.TestCase):
    """Tests results for the compas-sex dataset."""

    def setUp(self):
        self.compas = pd.read_csv(
            os.path.join(DATADIR, "exp-feature-sets-compas-sex.csv")
        )

    def test_feature_sets(self):
        """Test feature sets.

        Test:
            The compas dataset must contain 7 feature sets.

        Test:
            Each feature set must contain metrics for 5 model
            variants (4 models plus the data).

        """
        num_features = self.compas["num_features"].unique().tolist()

        # Test:
        self.assertEqual(len(num_features), 7)

        # Test:
        for n in num_features:
            self.assertEqual(
                self.compas[self.compas["num_features"] == n]["model"]
                .unique()
                .shape[0],
                5,
            )

    def test_model_data(self):
        """Test model data.

        Test:
            The values in the model column must belong to one of
            ['None', 'adaboostclassifier', 'decisiontreeclassifier',
            'logisticregression', 'randomforestclassifier']

        Test:
            Each model variant must contain metrics for 3 privileged
            group variants (privileged group, unprivileged group
            & unconditioned).

        """
        models = self.compas["model"].unique().tolist()

        # Test:
        expected_models = [
            "None",
            "adaboostclassifier",
            "decisiontreeclassifier",
            "logisticregression",
            "randomforestclassifier",
        ]
        self.assertCountEqual(expected_models, models)

        # Test:
        for model in models:
            self.assertEqual(
                self.compas[self.compas["model"] == model]["privileged"]
                .unique()
                .shape[0],
                3,
            )

    @unittest.skip("skip until we have data for 50 iterations.")
    def test_example_count(self):
        """Test total count of examples.

        Test:
            The compas dataset must contain a total of 50*9*5*3 = 4050
            examples.

        """

        self.assertEqual(self.compas.shape[0], 4050)


class TestCompasRaceData(unittest.TestCase):
    """Tests results for the compas-race dataset."""

    def setUp(self):
        self.compas = pd.read_csv(
            os.path.join(DATADIR, "exp-feature-sets-compas-race.csv")
        )

    def test_feature_sets(self):
        """Test feature sets.

        Test:
            The compas dataset must contain 7 feature sets.

        Test:
            Each feature set must contain metrics for 5 model
            variants (4 models plus the data).

        """
        num_features = self.compas["num_features"].unique().tolist()

        # Test:
        self.assertEqual(len(num_features), 7)

        # Test:
        for n in num_features:
            self.assertEqual(
                self.compas[self.compas["num_features"] == n]["model"]
                .unique()
                .shape[0],
                5,
            )

    def test_model_data(self):
        """Test model data.

        Test:
            The values in the model column must belong to one of
            ['None', 'adaboostclassifier', 'decisiontreeclassifier',
            'logisticregression', 'randomforestclassifier']

        Test:
            Each model variant must contain metrics for 3 privileged
            group variants (privileged group, unprivileged group
            & unconditioned).

        """
        models = self.compas["model"].unique().tolist()

        # Test:
        expected_models = [
            "None",
            "adaboostclassifier",
            "decisiontreeclassifier",
            "logisticregression",
            "randomforestclassifier",
        ]
        self.assertCountEqual(expected_models, models)

        # Test:
        for model in models:
            self.assertEqual(
                self.compas[self.compas["model"] == model]["privileged"]
                .unique()
                .shape[0],
                3,
            )

    @unittest.skip("skip until we have data for 50 iterations.")
    def test_example_count(self):
        """Test total count of examples.

        Test:
            The compas dataset must contain a total of 50*9*5*3 = 4050
            examples.

        """

        self.assertEqual(self.compas.shape[0], 4050)


class TestBankAgeData(unittest.TestCase):
    """Tests results for the bank-age dataset."""

    def setUp(self):
        self.bank = pd.read_csv(os.path.join(DATADIR, "exp-feature-sets-bank-age.csv"))

    def test_feature_sets(self):
        """Test feature sets.

        Test:
            The bank dataset must contain 17 feature sets.

        Test:
            Each feature set must contain metrics for 5 model
            variants (4 models plus the data).

        """
        num_features = self.bank["num_features"].unique().tolist()

        # Test:
        self.assertEqual(len(num_features), 17)

        # Test:
        for n in num_features:
            self.assertEqual(
                self.bank[self.bank["num_features"] == n]["model"].unique().shape[0],
                5,
            )

    def test_model_data(self):
        """Test model data.

        Test:
            The values in the model column must belong to one of
            ['None', 'adaboostclassifier', 'decisiontreeclassifier',
            'logisticregression', 'randomforestclassifier']

        Test:
            Each model variant must contain metrics for 3 privileged
            group variants (privileged group, unprivileged group
            & unconditioned).

        """
        models = self.bank["model"].unique().tolist()

        # Test:
        expected_models = [
            "None",
            "adaboostclassifier",
            "decisiontreeclassifier",
            "logisticregression",
            "randomforestclassifier",
        ]
        self.assertCountEqual(expected_models, models)

        # Test:
        for model in models:
            self.assertEqual(
                self.bank[self.bank["model"] == model]["privileged"].unique().shape[0],
                3,
            )

    @unittest.skip("skip until we have data for 50 iterations.")
    def test_example_count(self):
        """Test total count of examples.

        Test:
            The bank dataset must contain a total of 50*9*5*3 = 4050
            examples.

        """

        self.assertEqual(self.bank.shape[0], 4050)


class TestGermanSexData(unittest.TestCase):
    """Tests results for the german-sex dataset."""

    def setUp(self):
        self.german = pd.read_csv(
            os.path.join(DATADIR, "exp-feature-sets-german-sex.csv")
        )

    def test_feature_sets(self):
        """Test feature sets.

        Test:
            The german dataset must contain 18 feature sets.

        Test:
            Each feature set must contain metrics for 5 model
            variants (4 models plus the data).

        """
        num_features = self.german["num_features"].unique().tolist()

        # Test:
        self.assertEqual(len(num_features), 18)

        # Test:
        for n in num_features:
            self.assertEqual(
                self.german[self.german["num_features"] == n]["model"]
                .unique()
                .shape[0],
                5,
            )

    def test_model_data(self):
        """Test model data.

        Test:
            The values in the model column must belong to one of
            ['None', 'adaboostclassifier', 'decisiontreeclassifier',
            'logisticregression', 'randomforestclassifier']

        Test:
            Each model variant must contain metrics for 3 privileged
            group variants (privileged group, unprivileged group
            & unconditioned).

        """
        models = self.german["model"].unique().tolist()

        # Test:
        expected_models = [
            "None",
            "adaboostclassifier",
            "decisiontreeclassifier",
            "logisticregression",
            "randomforestclassifier",
        ]
        self.assertCountEqual(expected_models, models)

        # Test:
        for model in models:
            self.assertEqual(
                self.german[self.german["model"] == model]["privileged"]
                .unique()
                .shape[0],
                3,
            )

    @unittest.skip("skip until we have data for 50 iterations.")
    def test_example_count(self):
        """Test total count of examples.

        Test:
            The german dataset must contain a total of 50*9*5*3 = 4050
            examples.

        """

        self.assertEqual(self.german.shape[0], 4050)


class TestGermanAgeData(unittest.TestCase):
    """Tests results for the german-age dataset."""

    def setUp(self):
        self.german = pd.read_csv(
            os.path.join(DATADIR, "exp-feature-sets-german-age.csv")
        )

    def test_feature_sets(self):
        """Test feature sets.

        Test:
            The german dataset must contain 18 feature sets.

        Test:
            Each feature set must contain metrics for 5 model
            variants (4 models plus the data).

        """
        num_features = self.german["num_features"].unique().tolist()

        # Test:
        self.assertEqual(len(num_features), 18)

        # Test:
        for n in num_features:
            self.assertEqual(
                self.german[self.german["num_features"] == n]["model"]
                .unique()
                .shape[0],
                5,
            )

    def test_model_data(self):
        """Test model data.

        Test:
            The values in the model column must belong to one of
            ['None', 'adaboostclassifier', 'decisiontreeclassifier',
            'logisticregression', 'randomforestclassifier']

        Test:
            Each model variant must contain metrics for 3 privileged
            group variants (privileged group, unprivileged group
            & unconditioned).

        """
        models = self.german["model"].unique().tolist()

        # Test:
        expected_models = [
            "None",
            "adaboostclassifier",
            "decisiontreeclassifier",
            "logisticregression",
            "randomforestclassifier",
        ]
        self.assertCountEqual(expected_models, models)

        # Test:
        for model in models:
            self.assertEqual(
                self.german[self.german["model"] == model]["privileged"]
                .unique()
                .shape[0],
                3,
            )

    @unittest.skip("skip until we have data for 50 iterations.")
    def test_example_count(self):
        """Test total count of examples.

        Test:
            The german dataset must contain a total of 50*9*5*3 = 4050
            examples.

        """

        self.assertEqual(self.german.shape[0], 4050)


class TestMepsRaceData(unittest.TestCase):
    """Tests results for the meps-race dataset."""

    def setUp(self):
        self.meps = pd.read_csv(os.path.join(DATADIR, "exp-feature-sets-meps-race.csv"))

    def test_feature_sets(self):
        """Test feature sets.

        Test:
            The meps dataset must contain 40 feature sets.

        Test:
            Each feature set must contain metrics for 5 model
            variants (4 models plus the data).

        """
        num_features = self.meps["num_features"].unique().tolist()

        # Test:
        self.assertEqual(len(num_features), 40)

        # Test:
        for n in num_features:
            self.assertEqual(
                self.meps[self.meps["num_features"] == n]["model"].unique().shape[0],
                5,
            )

    def test_model_data(self):
        """Test model data.

        Test:
            The values in the model column must belong to one of
            ['None', 'adaboostclassifier', 'decisiontreeclassifier',
            'logisticregression', 'randomforestclassifier']

        Test:
            Each model variant must contain metrics for 3 privileged
            group variants (privileged group, unprivileged group
            & unconditioned).

        """
        models = self.meps["model"].unique().tolist()

        # Test:
        expected_models = [
            "None",
            "adaboostclassifier",
            "decisiontreeclassifier",
            "logisticregression",
            "randomforestclassifier",
        ]
        self.assertCountEqual(expected_models, models)

        # Test:
        for model in models:
            self.assertEqual(
                self.meps[self.meps["model"] == model]["privileged"].unique().shape[0],
                3,
            )

    @unittest.skip("skip until we have data for 50 iterations.")
    def test_example_count(self):
        """Test total count of examples.

        Test:
            The meps dataset must contain a total of 50*9*5*3 = 4050
            examples.

        """

        self.assertEqual(self.meps.shape[0], 4050)
