#+title: Adult
#+author: Arumoy Shome
#+date: [2022-07-25 Mon]
#+property: header-args:python :session *sh21qual-adult* :exports both :eval never-export

In this file we analyse the results obtained from computing all
=BinaryLabelDatasetMetric= & =ClassificationMetric= for the adult
dataset with a =LinearRegression= model, for a single protected
attribute =sex=. The results are stored in =adult.csv= which is what
we will analyse here. The dataset can be generated using the
=bin/adult.py= script.

* Init
In this section we perform some sanity checks, load the necessary
modules & the dataset.

#+begin_src python :results silent
  import pandas as pd
  import numpy as np
  pd.set_option('display.max_columns', None)
  pd.set_option('display.max_colwidth', None)
  pd.set_option('display.max_rows', None)

  import matplotlib
  matplotlib.use('Agg')           # non-interactive backend
  import matplotlib.pyplot as plt
  import seaborn as sns

  import os
  import sys
  ROOTDIR = os.path.abspath(os.path.join(os.getcwd(), '..'))
  DATADIR = os.path.join(ROOTDIR, 'data')

  sys.path.insert(0, ROOTDIR)
  from src import utils
  from src.utils import data_metrics_columns, model_metrics_columns
#+end_src

#+begin_src python :results silent
  adult = pd.read_csv(os.path.join(DATADIR, 'adult.csv'))
#+end_src

* Priliminary analysis
In this section we conduct some priliminary analysis of the dataset.

#+begin_src python
  adult
#+end_src

#+RESULTS:
#+begin_example
    num_negatives  num_positives subset  statistical_parity_difference  \
0         34014.0        11208.0   full                      -0.198901   
1         20988.0         9539.0   full                            NaN   
2         13026.0         1669.0   full                            NaN   
3         25514.0         8402.0  train                      -0.201944   
4         15720.0         7174.0  train                            NaN   
5          9794.0         1228.0  train                            NaN   
6             NaN            NaN   test                      -0.184484   
7          8500.0         2806.0   test                      -0.189774   
8             NaN            NaN   test                            NaN   
9          5268.0         2365.0   test                            NaN   
10            NaN            NaN   test                            NaN   
11         3232.0          441.0   test                            NaN   

    theil_index privileged protected  base_rate dataset               model  \
0           NaN       None       sex   0.247844   adult                None   
1           NaN       True       sex   0.312477   adult                None   
2           NaN      False       sex   0.113576   adult                None   
3           NaN       None       sex   0.247730   adult                None   
4           NaN       True       sex   0.313357   adult                None   
5           NaN      False       sex   0.111414   adult                None   
6      0.122473       None       sex        NaN   adult  logisticregression   
7           NaN       None       sex   0.248187   adult                None   
8           NaN       True       sex        NaN   adult  logisticregression   
9           NaN       True       sex   0.309839   adult                None   
10          NaN      False       sex        NaN   adult  logisticregression   
11          NaN      False       sex   0.120065   adult                None   

    accuracy  disparate_impact  
0        NaN          0.363470  
1        NaN               NaN  
2        NaN               NaN  
3        NaN          0.355548  
4        NaN               NaN  
5        NaN               NaN  
6   0.847249          0.310398  
7        NaN          0.387509  
8   0.812263               NaN  
9        NaN               NaN  
10  0.919956               NaN  
11       NaN               NaN  
#+end_example

#+begin_src python
  adult.shape
#+end_src

#+RESULTS:
| 12 | 12 |

#+begin_src python
  adult.dtypes
#+end_src

#+RESULTS:
#+begin_example
num_negatives                    float64
num_positives                    float64
subset                            object
statistical_parity_difference    float64
theil_index                      float64
privileged                        object
protected                         object
base_rate                        float64
dataset                           object
model                             object
accuracy                         float64
disparate_impact                 float64
dtype: object
#+end_example

#+begin_src python
  adult.describe(include='all')
#+end_src

#+RESULTS:
#+begin_example
        num_negatives  num_positives subset  statistical_parity_difference  \
count        9.000000       9.000000     12                       4.000000   
unique            NaN            NaN      3                            NaN   
top               NaN            NaN   test                            NaN   
freq              NaN            NaN      6                            NaN   
mean     15117.333333    4981.333333    NaN                      -0.193776   
std      10091.913793    4082.024865    NaN                       0.008069   
min       3232.000000     441.000000    NaN                      -0.201944   
25%       8500.000000    1669.000000    NaN                      -0.199662   
50%      13026.000000    2806.000000    NaN                      -0.194337   
75%      20988.000000    8402.000000    NaN                      -0.188451   
max      34014.000000   11208.000000    NaN                      -0.184484   

        theil_index privileged protected  base_rate dataset model  accuracy  \
count      1.000000         12        12   9.000000      12    12  3.000000   
unique          NaN          3         1        NaN       1     2       NaN   
top             NaN       None       sex        NaN   adult  None       NaN   
freq            NaN          4        12        NaN      12     9       NaN   
mean       0.122473        NaN       NaN   0.224943     NaN   NaN  0.859823   
std             NaN        NaN       NaN   0.087007     NaN   NaN  0.054937   
min        0.122473        NaN       NaN   0.111414     NaN   NaN  0.812263   
25%        0.122473        NaN       NaN   0.120065     NaN   NaN  0.829756   
50%        0.122473        NaN       NaN   0.247844     NaN   NaN  0.847249   
75%        0.122473        NaN       NaN   0.309839     NaN   NaN  0.883603   
max        0.122473        NaN       NaN   0.313357     NaN   NaN  0.919956   

        disparate_impact  
count           4.000000  
unique               NaN  
top                  NaN  
freq                 NaN  
mean            0.354231  
std             0.032228  
min             0.310398  
25%             0.344260  
50%             0.359509  
75%             0.369479  
max             0.387509  
#+end_example

Each metric is calculated for 3 different subsets of the dataset
(=train=, =test= & =full=). Each metric may further be conditioned in
3 different manner as indicated by value in the =privileged= column.
=None= means the metric is calculated on the full dataset, =True=
means it is conditioned on the privileged group (ie. =sex= is 1 or
'Male' in our case) and =False= means it is conditioned on the
unprivileged group (=sex= is 0 or 'Female').

* COMMENT Cleanup
In this section we perform some cleaning which is necessary for the
analysis to follow.

Lets convert the =consistency= column to a float dtype.

#+begin_src python
  adult['consistency'] = adult['consistency'].str.strip(to_strip='[]')
  adult['consistency'] = adult['consistency'].astype('float')
  adult['consistency'].dtypes
#+end_src

#+RESULTS:
: float64

* Analysis of metrics
In this section we analyse the fairness metrics. The section is
further divided into logical subsections.

** Analysis of count metrics
In this section we analyse the metrics which provide an absolute count
of something.

We start with the =num_positives=, =num_negatives= & =base_rate= which
are data metrics.

#+begin_src python :results file
  name = 'adult_barplot_prot-sex_subset-all_num-pos-neg'

  fig, axs = plt.subplots(1, 2, sharey=True, figsize=(10, 5))

  sns.barplot(data=metrics,
	      y='num_positives',
	      x='subset',
	      hue='privileged',
	      hue_order=['None', 'True', 'False'],
	      ax=axs[0])

  sns.barplot(data=metrics,
	      y='num_negatives',
	      x='subset',
	      hue='privileged',
	      hue_order=['None', 'True', 'False'],
	      ax=axs[1])

  # label the bars with the value, taken from
  # <https://stackoverflow.com/a/68323374>
  for container in axs[0].containers:
      axs[0].bar_label(container)

  for container in axs[1].containers:
      axs[1].bar_label(container)

  utils.savefig(fig, name)
#+end_src

#+RESULTS:
[[file:adult_barplot_prot-sex_subset-all_num-pos-neg.png]]

We note that the number of examples for the negative class is far more
than the positive class. This imbalance exists across the various
subsets, this makes sense since we take a random sample from the full
dataset to construct the train & test subsets.

In both metrics, we have more examples from the privileged group. That
is, we have more examples where the sex is 'Male'.

Thus we have two separate biases that we are dealing with: first is
the imbalance in the =class= column and second is the imbalance in the
=sex= column.

Lets zoom into only the train subset. This is purely for convenience
of comparing the data & model metrics together (since all model
metrics are calculated using only the test set).

#+begin_src python :results file
  name = 'adult_barplot_prot-sex_subset-test_num-pos-neg'

  fig, axs = plt.subplots(1, 2, sharey=True, figsize=(10, 5))

  sns.barplot(data=metrics[metrics['subset'] == 'test'],
	      y='num_positives',
	      x='subset',
	      hue='privileged',
	      hue_order=['None', 'True', 'False'],
	      ax=axs[0])

  sns.barplot(data=metrics[metrics['subset'] == 'test'],
	      y='num_negatives',
	      x='subset',
	      hue='privileged',
	      hue_order=['None', 'True', 'False'],
	      ax=axs[1])

  # label the bars with the value, taken from
  # <https://stackoverflow.com/a/68323374>
  for container in axs[0].containers:
      axs[0].bar_label(container)

  for container in axs[1].containers:
      axs[1].bar_label(container)

  utils.savefig(fig, name)
#+end_src

#+RESULTS:
[[file:adult_barplot_prot-sex_subset-test_num-pos-neg.png]]


#+begin_src python :results file
  name = 'adult_barplot_prot-sex_base-rate'

  fig, ax = plt.subplots()

  sns.barplot(data=metrics,
	      y='base_rate',
	      x='subset',
	      hue='privileged',
	      hue_order=['None', 'True', 'False'],
	      ax=ax)

  for container in ax.containers:
      ax.bar_label(container)

  utils.savefig(fig, name)

#+end_src

#+RESULTS:
[[file:adult_barplot_prot-sex_base-rate.png]]

The =base_rate= is the probability that the label of a given example
is positive. Here, we note that the =base_rate= is similar across the
subsets and the conditions. This makes sense since we used random
sampling to generate the train & test subsets.

The unconditioned =base_rate= is ~25% and this makes sense since we
have more examples of the negative class. The conditioned =base_rate=
for the privileged group is higher than the unprivileged group (~30%
vs. ~11%). This makes sense as well since we have more examples of the
privileged group.

Lets look at the confusion matrices for the linear regression model
next to understand the biases in the model. The confusion matrices
come in two flavours: the absolute & normalised versions.

file:adult_heatmap_prot-sex_cm.pdf
