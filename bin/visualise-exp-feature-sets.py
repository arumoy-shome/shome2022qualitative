"""Visualisations for experiments.

This script creates visualisations for the data generated by the
experiments conducted in this project.

Usage:
    TODO

The visualisations are saved as svg files under docs/ directory.

"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import os
import sys
import argparse

ROOTDIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
DATADIR = os.path.join(ROOTDIR, "data")
DOCDIR = os.path.join(ROOTDIR, "docs")

sys.path.insert(0, ROOTDIR)
from src.data import process


def savefig(fig, name):
    """Save a matplotlib or seaborn figure in svg format.

    The function also calls tight_layout prior to saving.

    Args:
        fig: matplotlib.fig.Figure or seaborn.*Grid object
        name: str, name of figure without extension

    Returns:
        None

    """
    fig.tight_layout()
    fig.savefig(name + ".svg", format="svg")


def lineplot(data, cols, name):
    """Create lineplot.

    TODO write description
    Args:
        data: pandas.Dataframe

    Returns:
        None

    """
    fig, axs = plt.subplots(
        nrows=1,
        ncols=len(cols),
        figsize=(5*len(cols), 5),
        sharey=True,
    )

    for idx, metric in enumerate(cols):
        ax=axs[idx]
        ax.set_ylabel(metric)
        sns.lineplot(
            data=data,
            x="num_features",
            y=metric,
            hue="model",
            style="model",
            ax=axs[idx])

    savefig(fig=fig, name=name)


def parse_args():
    """Parse command line arguments.

    In:
        None

    Returns:
        args: argparse.ArgumentParser
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "dataset",
        help="Dataset & protected attribute in <dataset-pattr> format",
        choices=[
            "adult-sex",
            "adult-race",
            "compas-sex",
            "compas-race",
            "bank-age",
            "german-sex",
            "german-age",
            "meps-RACE",
        ],
    )

    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()

    dataset_label = args.dataset
    data = pd.read_csv(
        os.path.join(
            DATADIR,
            "exp-feature-sets-{}-50.csv".format(dataset_label))
    )
    # fairness metrics are calculated without conditioning on any
    # (un)privileged group
    data = data[data["privileged"] == "None"]
    process(data, cols=["protected"])
    cols = [
        "disparate_impact",
        "statistical_parity_difference",
    ]

    # distribution plots
    name = "lineplot--exp-feature-sets--{}--di-spd".format(dataset_label)
    lineplot(
        data=data,
        cols=cols,
        name=name,
    )

    name = "lineplot--exp-feature-sets--{}--di-spd".format(dataset_label)
